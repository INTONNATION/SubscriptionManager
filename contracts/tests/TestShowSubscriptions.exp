#!/usr/local/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Aug 28 19:26:29 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn tonos-cli --url https://gql.custler.net debot fetch 0:0c50a165bf947e1bcd30c2f62d63d34af8e5dc6a0dffc9f300c65476631f748e
match_max 100000
expect -exact "Config: /Users/azavodovskiy/projects/SubscriptionsManager/contracts/tonos-cli.conf.json\r
Connecting to https://gql.custler.net\r
DeBot Info:\r
Name   : Subscription Deployer\r
Version: 0.2.0\r
Author : INTONNATION\r
Publisher: INTONNATION\r
Support: 0:0000000000000000000000000000000000000000000000000000000000000000\r
Description: Subscription Deployment\r
Hello, I am a Subscription Deployer DeBot.\r
Run the DeBot (y/n)?\r
"
send -- "y\r"
expect -exact "y\r
\r
User account 0:7195b99c08532ee6b7343143d41a91cd3fd7b8108751cec077445e2559705081\r
User public key 3B0D7FE8026952F9BD43DFBA7CB9B41C13DD626C411416CDFC9090CD4ABFB1AD\r
I can manage your subscriptions\r
1) Deploy new subscription\r
2) Show my subscriptions\r
3) Manage wallet\r
\r
debash\$ "
send -- "2\r"
expect -exact "2\r
User public key 3B0D7FE8026952F9BD43DFBA7CB9B41C13DD626C411416CDFC9090CD4ABFB1AD\r
DeBot Info:\r
Name   : Subscription Manager\r
Version: 0.2.0\r
Author : INTONATION\r
Publisher: INTONATION\r
Support: 0:841288ed3b55d9cdafa806807f02a0ae0c169aa5edfe88a789a6482429756a94\r
Description: Managing user subscriptions\r
Hello, I am an Subscription Manager DeBot.\r
Run the DeBot (y/n)?\r
"
send -- "y\r"
expect -exact "y\r
User public key 3B0D7FE8026952F9BD43DFBA7CB9B41C13DD626C411416CDFC9090CD4ABFB1AD\r
You have 2 subscriptions\r
2 your subscriptions has been found. To manage it choose subscription from the list or enter its address manually:\r
1) Name: Autotest 1630154813\r
Description: Autotest\r
Period: 3331\r
Price: 31\r
2) Name: Anton test2\r
Description: test2\r
Period: 3331\r
Price: 31\r
3) Main menu\r
\r
debash\$ "
send -- ""
expect -exact "^Ddebash\$ "
send -- ""
expect -exact "^Ddebash\$ "
send -- "\r"
expect -exact "\r
debash\$ "
send -- ""
expect eof
